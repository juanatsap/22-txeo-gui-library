```md
# Proyecto “Expenses Sucker Fyne” – Explicación Completa

¡Hola! A continuación, encontrarás una descripción detallada del proyecto **Expenses Sucker Fyne**, su propósito, la estructura de la aplicación, ejemplos de código y el uso de la base de datos (o archivo de datos) para almacenar y gestionar información relevante.

---

## 1. Resumen del Proyecto

**Expenses Sucker Fyne** es una aplicación de escritorio desarrollada en Go, utilizando el framework [Fyne](https://fyne.io/), para facilitar:
- La lectura, procesamiento y validación de transacciones bancarias.
- El formateo y resaltado de bloques de texto válidos o inválidos según reglas predefinidas.
- La edición del texto de entrada y la visualización del resultado procesado.
- El mantenimiento de un *blacklist* (lista de exclusión) que se guarda entre sesiones.

El proyecto aborda una **necesidad muy concreta**: tomar un extracto bancario con transacciones (copiado y pegado desde la web del banco), normalizarlo y verificar qué transacciones son válidas (por ejemplo, tienen fecha, cantidad y saldo restante correctamente) y cuáles no cumplen el formato.

---

## 2. Estructura Principal de la Aplicación

La aplicación se compone, principalmente, de los siguientes elementos:

1. **Editores de Texto y Split**  
   - Hay dos editores principales (panel izquierdo y panel derecho) con sus correspondientes barras de estado.  
   - Cada editor muestra o recibe texto y cuenta con un contador de líneas para ofrecer feedback al usuario.

2. **TextGrid para Resaltado**  
   - En un principio, se utiliza `TextGrid` para mostrar las líneas resaltadas en verde o rojo según su validez.  
   - Se valida cada bloque de 4 líneas:  
     1. Concepto (texto libre)  
     2. Fecha (o que empiece con un número; se valida a través de funciones como `startsWithNumber` e `isValidDate`)  
     3. Cantidad (con formato numérico al inicio)  
     4. Saldo restante (debe empezar con `+` o `-`)  

3. **RichText o MultiLineEntry**  
   - Para mostrar o editar texto con estilos, se ha estudiado el uso de `widget.RichText` y `widget.MultiLineEntry`.  
   - `TextGrid` no soporta negrita ni cursiva, por lo que el resaltado con fondos de color sí funciona, pero no el texto en **bold**.

4. **Blacklist (Lista de Exclusión)**  
   - El proyecto mantiene un *blacklist*, un archivo con palabras que deben ser excluidas en las validaciones, o que invalidan un bloque si aparecen en la línea.  
   - Se utiliza un editor llamado `BlacklistEditor` (generalmente `widget.MultiLineEntry`) para gestionar esta lista.  
   - El contenido de la lista se guarda y carga desde un archivo en el sistema (por ejemplo, `blacklist.txt`), de modo que se persisten los cambios entre sesiones.

5. **Layout y Barras de Estado**  
   - Cada editor puede tener su propia barra de estado para contar líneas.  
   - Hay un *footer* general, como parte de la interfaz principal, para mostrar información extra de la app o enlaces.

---

## 3. Validación de Bloques

La **validación de cada bloque de 4 líneas** se realiza en la función `validateBlock`, que hace lo siguiente:

1. Verifica que existan al menos 4 líneas (de lo contrario, se marca como inválido).  
2. Línea 1: Debe tener texto no vacío.  
3. Línea 2: Debe ser una fecha o empezar por un número (dependiendo de la lógica: `startsWithNumber(line2)` o `isValidDate(line2)`).
4. Línea 3: Debe empezar por un número (el importe de la transacción).  
5. Línea 4: Debe empezar con `+` o `-` (el saldo que queda en la cuenta).  

Si alguno de estos criterios falla, el bloque se considera inválido y se resalta en rojo.

```go
func (app *Config) validateBlock(block []string) bool {
    if len(block) < 4 {
        return false
    }

    // Validar línea 1 (texto no vacío)
    line1 := block[0]
    if strings.TrimSpace(line1) == "" {
        return false
    }

    // Validar línea 2 (fecha o número)
    line2 := block[1]
    if !startsWithNumber(line2) && !isValidDate(line2) {
        return false
    }

    // Validar línea 3 (cantidad numérica)
    line3 := block[2]
    if !startsWithNumber(line3) {
        return false
    }

    // Validar línea 4 (saldo que comienza con + o -)
    line4 := block[3]
    if !strings.HasPrefix(line4, "+") && !strings.HasPrefix(line4, "-") {
        return false
    }

    return true
}
```

En caso de ser válido, se resalta el bloque en verde claro.

---

## 4. Ejemplo de Código Relevante

### 4.1 Manejo de Estilos en `TextGrid`

```go
if isValid {
    grid.SetRowStyle(i, &widget.CustomTextGridStyle{
        BGColor: &color.NRGBA{224, 255, 224, 255},
    })
    // También se aplica a i+1, i+2, i+3
} else {
    grid.SetRowStyle(i, &widget.CustomTextGridStyle{
        BGColor: &color.NRGBA{255, 224, 224, 255},
    })
}
grid.Refresh()
```

> **Nota:** El atributo `TextStyle: fyne.TextStyle{Bold: true}` no se ve reflejado en el `TextGrid`, ya que Fyne todavía no soporta negrita en este widget.

### 4.2 Sincronización de Cambios y Contador de Líneas

Para el editor (por ejemplo, panel izquierdo):

```go
leftEditor := widget.NewMultiLineEntry()
leftStatusBar := widget.NewLabel("Líneas: 0")

leftEditor.OnChanged = func(s string) {
    lines := strings.Count(s, "\n") + 1
    leftStatusBar.SetText(fmt.Sprintf("Líneas: %d", lines))
}
```

Se coloca la barra de estado bajo el editor usando contenedores como `container.NewBorder()`.

---

## 5. Base de Datos o Almacenamiento de Datos

Aunque se menciona *base de datos*, en este proyecto la mayoría de información persistente se maneja en **archivos locales**:

- **`blacklist.txt`**: Contiene las palabras o líneas que el usuario desea excluir.  
- **Posible archivo de configuración**: Para guardar otros parámetros de la aplicación, como la ruta de salida, settings de validación, etc.

**Ejemplo de guardado de la blacklist**:

```go
func (app *Config) SaveBlacklist() {
    // Se usa un directorio en local, por ejemplo: /internal/data/blacklist.txt
    blacklistFile := filepath.Join(currentDir, "internal/data", "blacklist.txt")
    data := app.BlacklistEditor.Text
    err := ioutil.WriteFile(blacklistFile, []byte(data), 0644)
    if err != nil {
        fmt.Println("No se pudo escribir el archivo de blacklist:", err)
    }
}
```

De esta forma, el usuario puede editar el *blacklist*, y las palabras excluyentes se leen en `validateBlock` o en otras funciones para invalidar transacciones que contengan dichas palabras.

---

## 6. Posibles Extensiones y Usos

1. **RichText para Vista Previa**  
   - Si se quiere mostrar texto con estilos más avanzados (negrita, cursiva), se puede usar `widget.RichText` en lugar de `TextGrid`.  
   - El `TextGrid` está más orientado a un editor tipo “código” y no soporta negrita.

2. **Integración con Editores Separados**  
   - Mantener un editor “limpio” para el usuario y una vista previa que resalte los bloques.  
   - Esto mejora la UX y permite separar la lógica de entrada de texto de la lógica de validación/preview.

3. **Blacklist Avanzado**  
   - Añadir validaciones más complejas, e.g. expresiones regulares, para excluir transacciones concretas.  
   - Mantener distintas listas de exclusión.

4. **Exportar Resultados**  
   - Guardar los bloques válidos en un archivo CSV o en alguna base de datos real.  
   - Generar reportes de gastos mensuales.

---

## 7. Conclusión

**Expenses Sucker Fyne** es una aplicación de escritorio que:
- Utiliza Go y Fyne para brindar un entorno visual y multiplataforma.
- Facilita la gestión de extractos bancarios en texto plano.
- Valida cada bloque de transacción, resaltando con diferentes colores según sea válido o inválido.
- Permite mantener una lista de palabras excluyentes (blacklist) para filtrar transacciones no deseadas.
- Ofrece editores con contadores de líneas para mayor retroalimentación.

Con estos elementos, el proyecto simplifica la conversión de un copypaste bancario a un formato más estructurado, mostrando cuáles transacciones están correctamente formateadas y listas para un posterior análisis o guardado.

```